<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vpc on /var/log/pabotesu</title><link>https://pabotesu.github.io/tags/vpc/</link><description>Recent content in vpc on /var/log/pabotesu</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>&amp;copy; 2023 pabotesu</copyright><lastBuildDate>Tue, 06 Jun 2023 12:10:54 +0000</lastBuildDate><atom:link href="https://pabotesu.github.io/tags/vpc/index.xml" rel="self" type="application/rss+xml"/><item><title>20230606 BasicWebappTemplate_on_aws</title><link>https://pabotesu.github.io/posts/20230606-basicwebapptemplate_on_aws/</link><pubDate>Tue, 06 Jun 2023 12:10:54 +0000</pubDate><guid>https://pabotesu.github.io/posts/20230606-basicwebapptemplate_on_aws/</guid><description>AWSにてプリミティブなwebアプリのインフラを実装する 実装について 実装：Terraform パブリッククラウドベンダ：AWS 利用リソース：EC2(Amazon Elastic Compute Cloud), VPC(Amazon Virtual Private Cloud) 実装の流れ Providerの設定 各リソースのmodule実装 enviromentの設定、実装、実行 構成（実装例） . ├── README.md ├── enviroments │ └── env-01 │ ├── main.tf │ ├── provider.tf │ ├── terraform.tfstate │ ├── terraform.tfvars │ └── variables.tf ├── modules │ ├── autoscaling ※ │ │ ├── main.tf │ │ ├── outputs.tf │ │ └── variables.tf │ ├── compute │ │ ├── main.tf │ │ ├── outputs.</description></item></channel></rss>