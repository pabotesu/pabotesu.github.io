<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>/var/log/pabotesu</title><link>https://pabotesu.github.io/</link><description>Recent content on /var/log/pabotesu</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>&amp;copy; 2023 pabotesu</copyright><lastBuildDate>Tue, 15 Apr 2025 23:31:20 +0900</lastBuildDate><atom:link href="https://pabotesu.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>20250415 Wireguardでポート解放のような機能を実現する</title><link>https://pabotesu.github.io/posts/20250415-wireguard%E3%81%A7%E3%83%9D%E3%83%BC%E3%83%88%E8%A7%A3%E6%94%BE%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E6%A9%9F%E8%83%BD%E3%82%92%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B/</link><pubDate>Tue, 15 Apr 2025 23:31:20 +0900</pubDate><guid>https://pabotesu.github.io/posts/20250415-wireguard%E3%81%A7%E3%83%9D%E3%83%BC%E3%83%88%E8%A7%A3%E6%94%BE%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E6%A9%9F%E8%83%BD%E3%82%92%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B/</guid><description>Wireguardでポート解放のような機能を実現する 注意点 本稿で実装した機能については限定的な用途に絞っており、
読者の皆様のネットワーク環境における安全性を確実に担保する保障はございません。
試用される際は自己責任でお願いします。
あと、普通に悪用厳禁です。
はじまり 私事ではありますが、引越しを経て大きくネットワーク環境を変更するに至りました。
詳しい言及は本稿では避けますが、一般的なIPv6環境(MAP-Eによる広告)と相成りました。
お察しの通り、この状態だとポート解放はいささか難しいものがございます。
特に最近の傾向ですと己がサービスをISPの網を通して公開するというのは避けがちとの所感を得ております。
そこで、wiregurad を利用して擬似ポート解放のような物を実現できないかと思慮した次第でございます。
実現可能なサービスについて 当方の思慮している環境を構築できる既存サービスはいくつかあります。
Cloudflare Tunnel ngrock Tailscale etc &amp;hellip; 今を馳せるクラウドネットワークリソースサービスの皆様ですね
実装例 解説 user01はvpsに付与されているglobalIPアドレス宛に8080ポートにアクセス vpsで動作するwireguardは事前に設定されているポートとIPアドレス宛にポート転送を行う 自宅で動作しているwebサーバはwireguardの網を通してHTMLコンテンツをuser01に表示する ザックリ上記の動作を実装しました
詳細 vps側の設定例 vps側のIP状態
root@vultr:~# ip a 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host noprefixroute valid_lft forever preferred_lft forever 2: enp1s0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 56:00:05:40:cc:a0 brd ff:ff:ff:ff:ff:ff inet 198.</description></item><item><title>20240120 My NixOS Env</title><link>https://pabotesu.github.io/posts/20240120-my-nixos-env/</link><pubDate>Sat, 20 Jan 2024 01:30:07 +0900</pubDate><guid>https://pabotesu.github.io/posts/20240120-my-nixos-env/</guid><description>Nixという山に登る 注意点 本稿はNixで自身のデスクトップ環境を構築した際のお話となります。
文章内ではあくまで当方の認識や考え等も述べている箇所もございますが、齟齬等ございましたら優しくご指摘いただければ大変助かります。
また、本稿には他の技術に対する意見や他人の感想などが記載されている箇所もあり、気分を害する場合にはブラウザバックを推奨いたします。
（※筆者の意見ではございますが、様々な技術には一長一短があり、その特定の技術だけが全面的に優れている等は一切思っておりません。
「○○は最高！！」などと口走ってしまうことはありますが&amp;hellip;）
ここまでOKであれば、どうぞ以下よりご一読いただければ幸甚の限りでございます。
はじまり 恐れながら、人は冒険に出発するとき、ある程度の理由付けが必要なものと思います。
例えば、「なんとかマスターになるために電気ネズミと故郷にサヨナラバイバイする」とか、
「人間のことを知りたいから北方の天国に行くエルフ」とか、
当方の場合、趣味であるデスクトップ盆栽の同士が集う掲示板で、とある画像が投稿されたことがきっかけです。
そうです、めちゃめちゃ煽られました。
私は以前にも記事 にしておりましたが、 メインの環境はArch Linuxを利用しておりました。
Arch Linuxは非常ミニマムな構成で、多くのパッケージの最新バイナリが圧倒的に早く降ってくる、
大変クレバーで攻めた印象を受けるLinuxディストリビューションと思っております。
自分としてはその環境に大変満足していましたし、不自由はないものでした。
（※今も非常に優れた選択肢の一つと思っております。）
上記の画像を見た際には気分を害しましたし、他の技術を風刺しているのが見るに耐えませんでした。
しかし、上記の画像を真っ向から言い返せるほどのバックボーンもなければ、その風刺に対して心当たりがあったのも事実です。
気づけば肥大化している.dotfiles その場しのぎのスクリプト 日に日に増えていく埋もれた依存関係たち etc..etc.. これらの問題が解決できるのであれば、それはそれはどれほど素晴らしいものか&amp;hellip;!
そもそも、食わず嫌いはよくないね&amp;hellip;
よろしい、ならば使ってみよう&amp;hellip;!
Nixについて 前ふりが長くなり申し訳ありません、、、
ここからが本題です。
Nis is 何 Nixとは&amp;hellip;
正直様々な機能があり過ぎて説明しきることができませぬ、、、
ラテン語では結晶の意を称し、その多くはクロスプラットフォームのパッケージマネージャーを指し示す場合が多い印象です。
しかし、その実ビルドツールのような機能を有していたり、IaCのような特性を持っております。
他のパッケージマネージャーと比較した際に最も特徴的な点としては環境の再現性が非常に高いところにあります。
その再現性の高さに貢献している機能として、DerivationとNix storeがあります。
DerivationとはNixがパッケージを導入する際に必要となる情報や要素が定義されているものとなります。
例えば、依存関係、ソースコード、ビルドスクリプト、環境変数、アーキテクチャなどなど、、、
こちらを入力として最終的な出力を生成しパッケージとしてビルドします。
ビルドされたパッケージは/nix/store以下にハッシュ値を与えられ格納されます。
ちなみに、/nix/store配下にビルド後のパッケージと一緒に格納されているdrvがつくファイルがDerivationとなります。
❯ ls /nix/store | grep openssh 0f1agkdv114rpvvr8j8vgsnn5pqrqijz-openssh-9.6p1/ 4hlaavjnynzjcm9rah9bnsbmq1dfj4k5-openssh-9.6p1.drv 6r07d5qllsgxc8hkmzdwp24v5xi41fwm-openssh-9.5p1.tar.gz.drv gad46bs131izbnnj15jci4cr2kizcykj-openssh-9.6p1.drv jdccr7jfbbamylm1b7i03zyigh1352zv-openssh-9.6p1.tar.gz.drv jh340w9s38fkzzvz6g02a96xlja70qiy-openssh-9.6p1.drv l9ypx9ry9x3pkk8xfvr2r9lxpla6a00d-openssh-9.6p1/ qcgly1g00dg1d5in91gg79gsh5gpq14f-openssh-9.6p1.tar.gz.drv s3b4janyjwf7jac928n0dcp6fy3j5gh7-openssh-9.5p1/ y1i4d6803nxhvd0d0r39h6fyp9lbdlwj-openssh-9.5p1.drv ここで複数のバージョンのopensshが格納されているのが気になります。</description></item><item><title>20230610 Build k8s</title><link>https://pabotesu.github.io/posts/20230610-build_k8s/</link><pubDate>Sat, 10 Jun 2023 10:43:27 +0000</pubDate><guid>https://pabotesu.github.io/posts/20230610-build_k8s/</guid><description>セルフホストでKubernetesを構築する 実装について ハイパバイザ：ESXi ホストOS：Ubuntu 22.04 実装の流れ 仮想マシンの設定 全ノードで共通の設定をする 各ノードの設定をする Masterノードにて設定する Workerノードにて設定する 構成 Masterノード ホスト名:lab-k8s-master-node 構成: vCPU:2 RAM:4GB Disk:30GB Workerノード ホスト名:lab-k8s-worker-node01 構成: vCPU:2 RAM:4GB Disk:30GB 1. 仮想マシンの設定
以下のように設定 2. 全ノードで共通の設定をする
各ノードのホストを/etc/hostsに記載 root@lab-k8s-master-node:~# cat /etc/hosts 127.0.0.1 localhost 127.0.1.1 lab-k8s-master-node 192.168.100.81 lab-k8s-master-node # Masterノード 192.168.100.82 lab-k8s-worker-node01　# Workerノード 192.168.100.83 lab-k8s-worker-node02 # 今後追加予定のWorkerノード # The following lines are desirable for IPv6 capable hosts ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters swapを無効化 root@lab-k8s-master-node:~# swapoff -a root@lab-k8s-master-node:~# sed -i &amp;#39;/ swap / s/^\(.</description></item><item><title>20230606 BasicWebappTemplate_on_aws</title><link>https://pabotesu.github.io/posts/20230606-basicwebapptemplate_on_aws/</link><pubDate>Tue, 06 Jun 2023 12:10:54 +0000</pubDate><guid>https://pabotesu.github.io/posts/20230606-basicwebapptemplate_on_aws/</guid><description>AWSにてプリミティブなwebアプリのインフラを実装する 実装について 実装：Terraform パブリッククラウドベンダ：AWS 利用リソース：EC2(Amazon Elastic Compute Cloud), VPC(Amazon Virtual Private Cloud) 実装の流れ Providerの設定 各リソースのmodule実装 enviromentの設定、実装、実行 構成（実装例） . ├── README.md ├── enviroments │ └── env-01 │ ├── main.tf │ ├── provider.tf │ ├── terraform.tfstate │ ├── terraform.tfvars │ └── variables.tf ├── modules │ ├── autoscaling ※ │ │ ├── main.tf │ │ ├── outputs.tf │ │ └── variables.tf │ ├── compute │ │ ├── main.tf │ │ ├── outputs.</description></item><item><title>20230604 StaticPage_on_aws</title><link>https://pabotesu.github.io/posts/20230604-staticpage_on_aws/</link><pubDate>Sun, 04 Jun 2023 12:35:52 +0000</pubDate><guid>https://pabotesu.github.io/posts/20230604-staticpage_on_aws/</guid><description>AWSにて静的ページを実装する 実装について 実装：Terraform パブリッククラウドベンダ：AWS 利用リソース：S3(Amazon Simple Storage Service), Amazon CloudFront 実装の流れ Providerの設定 各リソースのmodule実装 enviromentの設定、実装、実行 構成（実装例） . ├── enviroments │ └── dev │ ├── main.tf │ ├── provider.tf │ ├── terraform.tfstate │ ├── terraform.tfvars │ └── variables.tf └── modules ├── cloudfront │ ├── main.tf │ ├── outputs.tf │ └── variables.tf ├── rout53 │ ├── main.tf │ ├── outputs.tf │ └── variables.tf └── s3 ├── main.tf ├── outputs.tf └── variables.</description></item><item><title>20230430 Build Misskeyserver</title><link>https://pabotesu.github.io/posts/20230430-build-misskeyserver/</link><pubDate>Sun, 30 Apr 2023 12:07:41 +0000</pubDate><guid>https://pabotesu.github.io/posts/20230430-build-misskeyserver/</guid><description>Misskeyサーバを実装する 実装について 実装対象：misskeyサーバ 利用リソース：自宅サーバ、cloudflare ハイパバイザ：proxmox 実装の流れ proxmox上に仮想マシン立ち上げ、misskeyサーバを構成する cloudflareにてCDN設定 構成（実装例） https://thxdaddy.xyz/ 1. proxmox上に仮想マシン立ち上げ、misskeyサーバを構成する
以下参考にmisskeyサーバを実装いたしました。 Misskey構築の手引き proxmoxの様子 2. cloudflareにてCDN設定
以下のようにCloudFlareZero TrustのTunnnelを設定 その後、1. proxmox上に仮想マシン立ち上げ、misskeyサーバを構成する にて実装したサーバにcloudflareのAPIのインストールと 設定したトンネルの接続コマンド（設定時提示されます。）を実行します。
基本的に以上でサーバを公開できます。
実装後 これで一国一城の主となったわけです・・・ おまけ Misskey v13でAn error has occurred!が発生する 以下記載のようにCloudflareのAuto Minifyの影響のようです。
CloudFlareで構成ルール等を使ってAuto Minifyをオフにすると解決します。 Misskey is not opening properly in 13.3.1 #9791 実際に動いてるサーバくん</description></item><item><title>AWSにおけるAuto Scalingに関する一検討 with Terraform</title><link>https://pabotesu.github.io/posts/20230322-aws_autoscaling/</link><pubDate>Tue, 21 Mar 2023 15:41:41 +0000</pubDate><guid>https://pabotesu.github.io/posts/20230322-aws_autoscaling/</guid><description>AWSのAuto Scalingに関する一検討 今回、AWSにおけるAuto Scalingに関するベストプラクティスに沿った内容で リソース管理に関する検討を行う。
なお、リソースの展開にはTerraformを用いることとする。
リソース展開：pabotesu/aws-compute-auto_scaling &amp;hellip;2023/03/22現在　移行追記予定&amp;hellip;</description></item><item><title>小生のLinux環境（+所感）</title><link>https://pabotesu.github.io/posts/20230221-my-linux-env/</link><pubDate>Tue, 21 Feb 2023 11:06:49 +0000</pubDate><guid>https://pabotesu.github.io/posts/20230221-my-linux-env/</guid><description>小生のLinux環境 OS Linux ディストリビューション：Arch Linux ディスクトップ環境 グラフィカルセッション：wayland ウィンドウマネージャ：swaywm ディスプレイマネージャ：lightdm (lightdm lightdm-webkit2-greeter lightdm-webkit-theme-litarvan) ツール郡 ステータスバー：waybar ランチャー：wofi ターミナル：Alacritty &amp;amp; tmux エディター：vim &amp;amp; vscode 画面ロック：swaylock-effects 通知デーモン：mako 音量バー：wob ブラウザ：google-chome shell：zsh ※装飾はprezto dotfileの管理：chezmoi クリップボード：wl-clipboard &amp;amp; clipman 音響周り pipewire を使ってます インターフェース：puleseaudio イヤホン：cyberblade ※世界中のみんな、これ買え。 (2023/02/21現在、今後追記予定) configファイル https://github.com/pabotesu/dotfiles 所感 Nixへの移行を考えよう！！！</description></item><item><title>Github PagesでGithub Actionsを利用したビルド・デプロイ時にうまく自前のドメインを反映できない問題</title><link>https://pabotesu.github.io/posts/20230214/</link><pubDate>Tue, 14 Feb 2023 11:52:46 +0000</pubDate><guid>https://pabotesu.github.io/posts/20230214/</guid><description>Github PageでGithub Actionsを利用したビルド・デプロイ時にうまく自前のドメインを反映できない問題 事象 具体的に↓のようになる。
github pagesの設置欄のCustom domain 項目を修正。
[$username].github.io → xxx.com等に変更 Github Actions を利用しbuild, deployしたら、もとの[$username].github.ioに戻ってしまう。 解決手法 hugoのディレクトリ内に、static/CNAMEファイルを作成する必要がある模様。
参考 https://gohugo.io/hosting-and-deployment/hosting-on-github/#use-a-custom-domain</description></item><item><title>GithubPages</title><link>https://pabotesu.github.io/posts/20230212-githubpages/</link><pubDate>Sun, 12 Feb 2023 09:07:01 +0000</pubDate><guid>https://pabotesu.github.io/posts/20230212-githubpages/</guid><description>GithubPagesでつまったわよ なんかつまったので、テストデプロイ
どうもDNSの問題だったぽい・・・よしッ!</description></item><item><title>Hello World</title><link>https://pabotesu.github.io/posts/20230211-hello-world/</link><pubDate>Sat, 11 Feb 2023 18:47:33 +0000</pubDate><guid>https://pabotesu.github.io/posts/20230211-hello-world/</guid><description>Hello World github.ioでページを作った。
これから投稿していく。</description></item><item><title>About pabotesu</title><link>https://pabotesu.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pabotesu.github.io/about/</guid><description>About pabotesu
Name : Lee Tesu ・・・{ I call it pabotesu } Age : 1997/06/28 Degree : Bachelor of Engineering@TUT Certification 基本情報技術者試験 &amp;ldquo;Fundamental Information Technology Engineer Examination&amp;rdquo; AWS Certified Solutions Architect - Associate AWS Certified Solutions Architect - Professional Cisco Certified Network Associate Linux Professional Institute Certification LPIC-1 Linux Professional Institute Certification LPIC-2 VMware Certified Professional Data Center Virtualization 2021 VMware Certified Professional Network Virtualization 2022 Social Media github.</description></item><item><title>Archives</title><link>https://pabotesu.github.io/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pabotesu.github.io/archives/</guid><description/></item></channel></rss>