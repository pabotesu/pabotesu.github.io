<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>network on /var/log/pabotesu</title><link>https://pabotesu.github.io/tags/network/</link><description>Recent content in network on /var/log/pabotesu</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>&amp;copy; 2023 pabotesu</copyright><lastBuildDate>Sat, 14 Jun 2025 22:27:49 +0900</lastBuildDate><atom:link href="https://pabotesu.github.io/tags/network/index.xml" rel="self" type="application/rss+xml"/><item><title>20250614 Wireguardを利用したNATtraversalなP2P通信の実装</title><link>https://pabotesu.github.io/posts/20250614-wireguard%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9Fnattraversal%E3%81%AAp2p%E9%80%9A%E4%BF%A1%E3%81%AE%E5%AE%9F%E8%A3%85/</link><pubDate>Sat, 14 Jun 2025 22:27:49 +0900</pubDate><guid>https://pabotesu.github.io/posts/20250614-wireguard%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9Fnattraversal%E3%81%AAp2p%E9%80%9A%E4%BF%A1%E3%81%AE%E5%AE%9F%E8%A3%85/</guid><description>Wireguardを利用したNATtraversalなP2P通信の実装 はじめに インターネット越しにセキュアかつ柔軟に通信を行う手段として、WireGuard をベースにした VPN やメッシュネットワークの仕組みが注目されています。 近年では Tailscale や ZeroTier といった製品が登場し、NAT越えやピア同士の自動接続といった課題を見事に解決しています。
本記事では、WireGuard + etcdによる簡易的なP2Pメッシュネットワーク構築の実装例として、筆者が提案する「kurohabaki」というアプローチについて紹介します。
「kurohabaki」は、以下のような要件を満たすシンプルな仕組みを目指して開発されました
WireGuardを使って各ノードが相互に接続される etcdを使ってノード情報（公開鍵、IP、endpointなど）を一元管理 STUN(に類似するアプローチ)を用いてNAT越しのendpoint情報を自動検出・更新 Server側でPeer情報を統合し、全ノードが疎通可能な構成を維持 これらをGo言語で実装し、Linux上で動作するクライアント・サーバ構成を実験的に作りました。 最初は個人的なネットワーク実験環境の構築が目的でしたが、想像以上に柔軟性があり、また市販サービスの仕組みを理解する良い教材にもなりました。
業界の動向と周辺技術 現行VPNのネットワーク構成 現在主流のVPN構成は、ハブアンドスポーク型ネットワーク構成が一般的です。 この構成では、VPNサーバが通信のハブとして機能し、各ノード（クライアント）はスポークとしてサーバ経由で他ノードと通信します。
拠点間VPNのように、専用のVPN装置同士を接続する構成も存在しますが、ノード単位での接続、つまりエンドユーザ端末やサービスごとの細かな接続を行いたい場合も、基本的にはVPNサーバ（ハブ）を介した接続になります。
現行のVPNの構成だと、以下の課題も存在します。
単一障害点（SPOF）：中央のVPNサーバが停止すると、全ノード間の通信が断絶する スケーラビリティの限界：ノード数が増えると、サーバ側の負荷（CPU, メモリ, 帯域）が急増し、性能劣化や接続制限が発生しやすい レイテンシの増加：ノード間通信が常にハブを経由するため、物理的に近いノード同士でも遠回りのルートになることがある 構成が固定的：クライアントは基本的にサーバを介する前提で設計されており、柔軟なピア間通信や動的構成変更が難しい 上記の課題を解決するために、以下のような新たなVPNの構成に注目が集まっております。
メッシュ型VPNの登場と再定義されるネットワーク構成 今までのハブアンドスポーク型のネットワーク構成から、メッシュ型のネットワーク構成を利用するVPNサービスが台頭しております。
メッシュ型の構成では、各ノードが等しくネットワークに参加し、必要に応じて他ノードと直接接続して通信を行います。つまり、ノード同士がP2Pで接続し、中央のサーバを中継することなく最短経路での通信が可能になります。
この構成の最大の特徴は、中央の通信ハブを必要としないことです。もちろん、ノード情報の登録やキー交換といったコントロールプレーンは必要になりますが、実際のデータ通信はノード間で完結するため、トラフィックの集中を避けることができ、構成全体がよりシンプルかつ柔軟になります。
同ネットワーク構成には特に以下のような有性があります。
スケーラビリティに優れる：ノード数が増えてもトラフィックが一箇所に集中しないため、全体のパフォーマンスが劣化しにくい。 自律分散的な構成が可能：一部のノードやサーバがダウンしても、他ノード間の通信は継続できる（フォールトトレラント性の向上）。 拠点・端末間通信の最適化：地理的・論理的に近いノード同士が直接接続されることで、VPN経由の遅延や帯域使用が最小化される。 柔軟な拠点構成：拠点ごとにVPN装置を用意する必要がなく、ソフトウェアだけで動的に接続を構成できる。 メッシュ型VPNが抱える課題 メッシュ型VPNは、ノード間の直接通信を基本とすることで、レイテンシの低減やトラフィックの分散といった多くのメリットをもたらします。しかしその一方で、すべてのノードがP2Pで接続できることを前提としているため、ネットワーク越え（NAT越え）やファイアウォール通過といった技術的課題に直面します。
NAT越え（NAT Traversal）の必要性 多くのノードは家庭用ルータやクラウド環境の背後で動作しており、プライベートIPアドレスを持つ「NATデバイスの配下」に存在します。この場合、外部からそのノードへ直接アクセスすることができず、P2P通信が成立しないという問題が発生します。
接続のためには、相手ノードのグローバルIPアドレスとポート番号（NAT変換後の情報）を取得する必要があり、NAT(本稿では主にIPマスカレード,NAPTを想定)の動的なIP:Portのマッピングに対応する必要があります。
しかし、すべてのNATがこのような仕組みに対応できるわけではなく、Symmetric NAT や キャリアグレードNAT（CGN） のように、外部との直接通信が難しいケースも少なくありません。
ステートフルファイアウォールの存在 さらに問題を複雑にするのが、ステートフル（状態保持型）ファイアウォールの存在です。 この種のファイアウォールは、「内から外への通信に対してのみ応答パケットを許可する」 というポリシーで設計されていることが多く、外部からのP2P通信要求は通常ブロックされます。
たとえNAT越えに必要なグローバル(NAT変換後)IP:Portが判明しても、ファイアウォールが初動の通信を遮断してしまうと、P2P接続そのものが成立しない可能性があります。
P2P接続を支える技術 メッシュ型VPNにおけるノード間通信は、基本的にSTUNとUDP Hole Punchingを活用して成立します。</description></item><item><title>20250415 Wireguardでポート開放のような機能を実現する</title><link>https://pabotesu.github.io/posts/20250415-wireguard%E3%81%A7%E3%83%9D%E3%83%BC%E3%83%88%E8%A7%A3%E6%94%BE%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E6%A9%9F%E8%83%BD%E3%82%92%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B/</link><pubDate>Tue, 15 Apr 2025 23:31:20 +0900</pubDate><guid>https://pabotesu.github.io/posts/20250415-wireguard%E3%81%A7%E3%83%9D%E3%83%BC%E3%83%88%E8%A7%A3%E6%94%BE%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E6%A9%9F%E8%83%BD%E3%82%92%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B/</guid><description>Wireguardでポート開放のような機能を実現する 注意点 本稿で実装した機能については限定的な用途に絞っており、
読者の皆様のネットワーク環境における安全性を確実に担保する保障はございません。
試用される際は自己責任でお願いします。
あと、普通に悪用厳禁です。
はじまり 私事ではありますが、引越しを経て大きくネットワーク環境を変更するに至りました。
詳しい言及は本稿では避けますが、一般的なIPv6環境(MAP-Eによる広告)と相成りました。
お察しの通り、この状態だとポート開放はいささか難しいものがございます。
特に最近の傾向ですと己がサービスをISPの網を通して公開するというのは避けがちとの所感を得ております。
そこで、wiregurad を利用して擬似ポート開放のような物を実現できないかと思慮した次第でございます。
実現可能なサービスについて 当方の思慮している環境を構築できる既存サービスはいくつかあります。
Cloudflare Tunnel ngrock Tailscale etc &amp;hellip; 今を馳せるクラウドネットワークリソースサービスの皆様ですね
実装例 解説 user01はvpsに付与されているglobalIPアドレス宛に8080ポートにアクセス vpsで動作するwireguardは事前に設定されているポートとIPアドレス宛にポート転送を行う 自宅で動作しているwebサーバはwireguardの網を通してHTMLコンテンツをuser01に表示する ザックリ上記の動作を実装しました
詳細 vps側の設定例 vps側のIP状態
root@vultr:~# ip a 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host noprefixroute valid_lft forever preferred_lft forever 2: enp1s0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 56:00:05:40:cc:a0 brd ff:ff:ff:ff:ff:ff inet 198.</description></item></channel></rss>